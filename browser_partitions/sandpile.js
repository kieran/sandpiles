// Generated by CoffeeScript 1.9.1
var Partition, Sandpile;

Partition = (function() {
  function Partition(x1, y1, x2, y2, parent) {
    var idx, len, m, ref, row;
    this.x1 = x1;
    this.y1 = y1;
    this.x2 = x2;
    this.y2 = y2;
    this.parent = parent;
    this.matrix = new Array(this.x2 - this.x1 + 1);
    ref = this.matrix;
    for (idx = m = 0, len = ref.length; m < len; idx = ++m) {
      row = ref[idx];
      this.matrix[idx] = new Array(this.y2 - this.y1 + 1);
    }
  }

  Partition.prototype.jobs = 0;

  Partition.prototype.drop = function(x, y, done) {
    var lx, ly;
    lx = x - this.x1;
    ly = y - this.y1;
    this.jobs++;
    if ((this.x2 >= x && x >= this.x1) && (this.y2 >= y && y >= this.y1)) {
      this.matrix[lx][ly] = (this.matrix[lx][ly] || 0) + 1;
      if (this.matrix[lx][ly] === 4) {
        this.topple(x, y);
      }
    } else {
      this.parent.drop(x, y);
    }
    this.jobs--;
    if (this.jobs === 0) {
      return done();
    }
  };

  Partition.prototype.topple = function(x, y) {
    var lx, ly;
    lx = x - this.x1;
    ly = y - this.y1;
    this.matrix[lx][ly] = 0;
    this.drop(x + 1, y);
    this.drop(x - 1, y);
    this.drop(x, y + 1);
    return this.drop(x, y - 1);
  };

  return Partition;

})();

Sandpile = (function() {
  Sandpile.prototype.num_partitions = 9;

  Sandpile.prototype.drawEvery = 1000;

  Sandpile.prototype.step = 0;

  Sandpile.prototype.jobs = 0;

  function Sandpile(size, canvas_id) {
    var col, i, j, len, len1, m, n, ref, ref1, row;
    this.size = size;
    this.canvas_id = canvas_id;
    this.pw = this.partition_width = Math.floor(this.size / Math.sqrt(this.num_partitions));
    this.partitions = new Array(Math.sqrt(this.num_partitions));
    ref = this.partitions;
    for (i = m = 0, len = ref.length; m < len; i = ++m) {
      row = ref[i];
      this.partitions[i] = new Array(Math.sqrt(this.num_partitions));
      ref1 = this.partitions[i];
      for (j = n = 0, len1 = ref1.length; n < len1; j = ++n) {
        col = ref1[j];
        this.partitions[i][j] = new Partition(i * this.pw, j * this.pw, i * this.pw + this.pw - 1, j * this.pw + this.pw - 1, this);
      }
    }
    this.canvas = document.getElementById(this.canvas_id);
  }

  Sandpile.prototype.drop = function(x, y) {
    var i, j, part;
    this.jobs++;
    i = Math.floor(x / this.partition_width);
    j = Math.floor(y / this.partition_width);
    part = this.partitions[i][j];
    return part.drop(x, y, this.decr.bind(this));
  };

  Sandpile.prototype.decr = function() {
    this.jobs--;
    if (this.jobs === 0) {
      if (this.step % this.drawEvery) {
        setTimeout((function(_this) {
          return function() {
            return _this.next();
          };
        })(this), 0);
      } else {
        window.requestAnimationFrame((function(_this) {
          return function() {
            _this.draw();
            return _this.next();
          };
        })(this));
      }
    }
  };

  Sandpile.prototype.next = function() {
    var x, y;
    this.step++;
    x = y = Math.ceil(this.size / 2);
    return this.drop(x, y);
  };

  Sandpile.prototype.colours = ["#000", "#009", "#900", "#090"];

  Sandpile.prototype.draw = function() {
    var col, ctx, i, j, k, l, len, lrow, m, ref, results, row, val, x, y;
    this.canvas.width = this.size;
    this.canvas.height = this.size;
    ctx = this.canvas.getContext('2d');
    ref = this.partitions;
    results = [];
    for (i = m = 0, len = ref.length; m < len; i = ++m) {
      row = ref[i];
      results.push((function() {
        var len1, n, ref1, results1;
        ref1 = this.partitions[i];
        results1 = [];
        for (j = n = 0, len1 = ref1.length; n < len1; j = ++n) {
          col = ref1[j];
          results1.push((function() {
            var len2, o, ref2, results2;
            ref2 = this.partitions[i][j].matrix;
            results2 = [];
            for (k = o = 0, len2 = ref2.length; o < len2; k = ++o) {
              lrow = ref2[k];
              results2.push((function() {
                var len3, p, ref3, results3;
                ref3 = this.partitions[i][j].matrix[k];
                results3 = [];
                for (l = p = 0, len3 = ref3.length; p < len3; l = ++p) {
                  val = ref3[l];
                  ctx.fillStyle = this.colours[val || 0];
                  x = i * this.pw + k;
                  y = j * this.pw + l;
                  results3.push(ctx.fillRect(x, y, 2, 2));
                }
                return results3;
              }).call(this));
            }
            return results2;
          }).call(this));
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  return Sandpile;

})();
